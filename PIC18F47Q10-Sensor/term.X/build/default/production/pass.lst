

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                                           Mon Dec 18 16:38:44 2023


     1                           	processor	18F47Q10
     2                           	pagewidth 132
     3                           	opt	flic
     4                           	psect	udata_acs,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     5                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     6                           	psect	udata_bank1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     7                           	psect	udata_bank2,global,class=BANK2,space=1,delta=1,lowdata,noexec
     8                           	psect	udata_bank3,global,class=BANK3,space=1,delta=1,lowdata,noexec
     9                           	psect	udata_bank4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    10                           	psect	udata_bank5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    11                           	psect	udata_bank6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    12                           	psect	udata_bank7,global,class=BANK7,space=1,delta=1,lowdata,noexec
    13                           	psect	udata_bank8,global,class=BANK8,space=1,delta=1,lowdata,noexec
    14                           	psect	udata_bank9,global,class=BANK9,space=1,delta=1,lowdata,noexec
    15                           	psect	udata_bank10,global,class=BANK10,space=1,delta=1,lowdata,noexec
    16                           	psect	udata_bank11,global,class=BANK11,space=1,delta=1,lowdata,noexec
    17                           	psect	udata_bank12,global,class=BANK12,space=1,delta=1,lowdata,noexec
    18                           	psect	udata_bank14,global,class=BANK14,space=1,delta=1,lowdata,noexec
    19                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
    20                           	psect	code,global,reloc=2,class=CODE,delta=1
    21                           	psect	data,global,reloc=2,class=CONST,delta=1,noexec
    22                           	psect	edata,global,class=EEDATA,space=3,delta=1,noexec
    23                           	psect	text3,local,reloc=2,class=CODE,delta=1
    24   000000                     
    25                           	psect	edata
    26   000000                     stk_offset	set	0
    27   000000                     auto_size	set	0
    28                           
    29                           ; stack_auto defines a symbol /name/_offset which equates to the
    30                           ; stack offset of the auto object in question
    31   000000                     
    32                           ; stack_param defines a symbol /name/_offset which equates to the
    33                           ; stack offset of the parameter object in question
    34   000000                     
    35                           ; alloc_stack adjusts the SP to allocate space for auto objects
    36                           ; it also links in to the btemp symbol so that can be used
    37   000000                     
    38                           ; restore_stack adjusts the SP to remove all auto and parameter
    39                           ; objects from the stack prior to returning from a function
    40   000000                     
    41                           	psect	text3
    42   0011D8                     _pass_variable_between_C_and_ASM:
    43                           	callstack 0
    44                           
    45                           ; the argument (3) is stored in W whe we call the function ;> argumento 3 esta no W
    46   0011D8  0F05               	addlw	5	;Now we add "5" to W. -> sumamos 5 ao W -> w = 8
    47                           
    48                           ; incrementar uma variavel global -> NUMERO DE CICLOS FEITOS -> para isso precisamos do w, logo vamo
      +                          s guardar o valor de w numa variavel temp
    49                           ;now we are going to add a value to the global variable var_global, and we will need to use the W re
      +                          gister. Since the function returns the value of W,
    50                           ;we must save it.
    51   0011DA  6E03               	movwf	3,c
    52                           
    53                           ;store W in a variable ; variavel temp para guardar W ; temp = 8
    54                           ;add 1 to the global variable
    55   0011DC  0100               	banksel	_var_global
    56   0011DE  0E01               	movlw	1
    57   0011E0  2725               	addwf	_var_global,f,b
    58                           
    59                           ;the "1" in this instruction tells the compiler to save the result of the ADD to _var_global. If it 
      +                          was "0" it would be saved in "W".
    60                           ; adicionamos o w à var global ; var = var + 1
    61                           ; ,1 pq o valor ta a ser guardado em var
    62                           ;now we need to recover the W to return the result of adding (3) with (5).
    63   0011E2  0B00               	andlw	0	; w = 0 para juntar 0 à temp = 8
    64   0011E4  2403               	addwf	3,w,c	;put the variable value back into W for the return. Here it is "0" so that the ADD is s
      +                          aved into W.
    65                           
    66                           ; ,0 esta a ser guardado no w
    67                           ; temp + w = 8 + 0 = 8 = w
    68   0011E6  0012               	return		;when the function returns, the _var_global value is already updated and it will return the
      +                           W value back to C for it to put in "result"
    69                           tosu	equ	0xFFF
    70                           tosh	equ	0xFFE
    71                           tosl	equ	0xFFD
    72                           stkptr	equ	0xFFC
    73                           pclatu	equ	0xFFB
    74                           pclath	equ	0xFFA
    75                           pcl	equ	0xFF9
    76                           tblptru	equ	0xFF8
    77                           tblptrh	equ	0xFF7
    78                           tblptrl	equ	0xFF6
    79                           tablat	equ	0xFF5
    80                           prodh	equ	0xFF4
    81                           prodl	equ	0xFF3
    82                           indf0	equ	0xFEF
    83                           postinc0	equ	0xFEE
    84                           postdec0	equ	0xFED
    85                           preinc0	equ	0xFEC
    86                           plusw0	equ	0xFEB
    87                           fsr0h	equ	0xFEA
    88                           fsr0l	equ	0xFE9
    89                           wreg	equ	0xFE8
    90                           indf1	equ	0xFE7
    91                           postinc1	equ	0xFE6
    92                           postdec1	equ	0xFE5
    93                           preinc1	equ	0xFE4
    94                           plusw1	equ	0xFE3
    95                           fsr1h	equ	0xFE2
    96                           fsr1l	equ	0xFE1
    97                           bsr	equ	0xFE0
    98                           indf2	equ	0xFDF
    99                           postinc2	equ	0xFDE
   100                           postdec2	equ	0xFDD
   101                           preinc2	equ	0xFDC
   102                           plusw2	equ	0xFDB
   103                           fsr2h	equ	0xFDA
   104                           fsr2l	equ	0xFD9
   105                           status	equ	0xFD8


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                               Mon Dec 18 16:38:44 2023

                         isa$std 0001  _pass_variable_between_C_and_ASM 11D8                       _var_global 0025  
                       isa$xinst 0000  
